import {
  Component,
  ElementRef,
  inject,
  OnInit,
  ViewChild,
} from '@angular/core';
import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { EmployeeService } from '../../services/employee';
import { DatePipe } from '@angular/common';
import { EmployeeModel } from '../../model/Employee.model';

@Component({
  selector: 'app-leave',
  imports: [ReactiveFormsModule, DatePipe],
  templateUrl: './leave.html',
  styleUrl: './leave.css',
})
export class Leave implements OnInit {
  @ViewChild('addLeaveModal') addLeaveModal!: ElementRef;
  @ViewChild('viewLeaveModal') viewLeaveModal!: ElementRef;

  employeeService = inject(EmployeeService);

  leaveForm: FormGroup = new FormGroup({
    leaveId: new FormControl(0),
    employeeId: new FormControl(0),
    fromDate: new FormControl(''),
    toDate: new FormControl(''),
    noOfDays: new FormControl(''),
    leaveType: new FormControl(''),
    details: new FormControl(''),
    isApproved: new FormControl(false),
    approvedDate: new FormControl(null),
  });

  leaveList: any[] = [];

  constructor() {
    // debugger;
    const loggedData = localStorage.getItem('leaveUser');
    if (loggedData != null) {
      const parseData = JSON.parse(loggedData);
      console.log(parseData);
      this.leaveForm.controls['employeeId'].setValue(parseData.employeeId);
    }
  }

  ngOnInit(): void {
    this.loadLeave();
  }

  loadLeave() {
    const empId = this.leaveForm.controls['employeeId'].value;
    this.employeeService.toGetEmployeeLeaveById(empId).subscribe({
      next: (result: any) => {
        this.leaveList = result.data;
      },
    });
  }

  saveLeave() {
    const formValue = this.leaveForm.value;
    this.employeeService.toCreateLeave(formValue).subscribe({
      next: () => {},
    });
  }

  openAddLeaveModal() {
    if (this.addLeaveModal) {
      this.addLeaveModal.nativeElement.style.display = 'block';
    }
  }

  closeLeaveModal() {
    if (this.addLeaveModal) {
      this.addLeaveModal.nativeElement.style.display = 'none';
    }
  }
}
